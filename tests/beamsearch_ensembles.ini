;; Small training test

[main]
name="translation"
tf_manager=<tf_manager>
output="tests/outputs/beamsearch"
overwrite_output_dir=True
batch_size=16
epochs=5
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=<bs_runners>
postprocess=None
evaluation=[("target_beam.rank001", "target", <bleu>)]
logging_period=20
validation_period=60
runners_batch_size=1
random_seed=1234

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
num_sessions=4
save_n_best=4

[bleu]
class=evaluators.bleu.BLEUEvaluator

[train_data]
; This is a definition of the training data object. Dataset is not a standard
; class, it treats the __init__ method's arguments as a dictionary, therefore
; the data series names can be any string, prefixed with "s_". To specify the
; output file for a series, use "s_" prefix and "_out" suffix, e.g.
; "s_target_out"
class=dataset.load_dataset_from_files
s_source="tests/data/train.tc.en"
s_target="tests/data/train.tc.de"
preprocessors=[("source", "source_chars", processors.helpers.preprocess_char_based)]
lazy=True

[val_data]
; Validation data, the languages are not necessary here, encoders and decoders
; access the data series via the string identifiers defined here.
class=dataset.load_dataset_from_files
s_source="tests/data/val.tc.en"
s_target="tests/data/val.tc.de"
preprocessors=[("source", "source_chars", processors.helpers.preprocess_char_based)]

[encoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/outputs/vocab/encoder_vocab.tsv"

[encoder]
class=encoders.recurrent.SentenceEncoder
name="sentence_encoder"
rnn_size=7
max_input_len=10
embedding_size=11
dropout_keep_prob=0.5
data_id="source"
vocabulary=<encoder_vocabulary>

[decoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/outputs/vocab/decoder_vocab.tsv"

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<encoder>]
rnn_size=8
embedding_size=9
dropout_keep_prob=0.5
data_id="target"
max_output_len=10
vocabulary=<decoder_vocabulary>

[bs_decoder]
class=decoders.beam_search_decoder.BeamSearchDecoder
name="beam_search_decoder"
parent_decoder=<decoder>
length_normalization=0.6
max_steps=10
beam_size=3

[trainer]
; This block just fills the arguments of the trainer __init__ method.
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
l2_weight=1.0e-8
clip_norm=1.0

[bs_runners]
class=runners.beamsearch_runner.beam_search_runner_range
output_series="target_beam"
decoder=<bs_decoder>
max_rank=2
